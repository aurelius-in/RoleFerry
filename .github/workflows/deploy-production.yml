name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECS_CLUSTER: roleferry-prod
  API_SERVICE: api
  WORKERS_SERVICE: workers

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run backend tests
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=term
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm run test
      
      - name: Type check
        run: |
          cd frontend
          npm run build

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push backend image
        working-directory: ./backend
        run: |
          docker build -t $ECR_REGISTRY/roleferry-api:${{ github.sha }} .
          docker tag $ECR_REGISTRY/roleferry-api:${{ github.sha }} $ECR_REGISTRY/roleferry-api:latest
          docker push $ECR_REGISTRY/roleferry-api:${{ github.sha }}
          docker push $ECR_REGISTRY/roleferry-api:latest
      
      - name: Build, tag, and push frontend image
        working-directory: ./frontend
        run: |
          docker build -t $ECR_REGISTRY/roleferry-web:${{ github.sha }} .
          docker tag $ECR_REGISTRY/roleferry-web:${{ github.sha }} $ECR_REGISTRY/roleferry-web:latest
          docker push $ECR_REGISTRY/roleferry-web:${{ github.sha }}
          docker push $ECR_REGISTRY/roleferry-web:latest

  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update API service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.API_SERVICE }} \
            --force-new-deployment \
            --no-cli-pager
      
      - name: Update Workers service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.WORKERS_SERVICE }} \
            --force-new-deployment \
            --no-cli-pager
      
      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.API_SERVICE }} ${{ env.WORKERS_SERVICE }}
      
      - name: Run smoke tests
        run: |
          sleep 30  # Allow ALB health checks to pass
          curl -f https://api.roleferry.com/health || exit 1
          curl -f https://roleferry.com || exit 1

  notify:
    name: Notify Team
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Production deployment ${{ needs.deploy.result }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*RoleFerry Production Deployment*\n\nStatus: ${{ needs.deploy.result }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

